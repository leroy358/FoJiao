<?xml version="1.0" encoding="utf-8"?>
<!--Webconfig文件是一个xml文件，configuration是xml文件的根节点，由于xml文件的根节点只能有一个，所以Webconfig的所有配置都是在这个节点内进行的。-->
<configuration>
  <!--指定配置节和命名空间声明。clear:移除对继承的节和节组的所有引用，只允许由当前 section 和 sectionGroup 元素添加的节和节组。remove:移除对继承的节和节组的引用。
 section:定义配置节处理程序与配置元素之间的关联。sectionGroup:定义配置节处理程序与配置节之间的关联。-->
  <configSections>
    <!--log4net 配置信息-->
    <section name="log4net" type="log4net.Config.Log4NetConfigurationSectionHandler" />
    <section name="entityFramework" type="System.Data.Entity.Internal.ConfigFile.EntityFrameworkSection, EntityFramework, Version=6.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" requirePermission="false" />
  </configSections>
  <!--连接字符串设置，一般控制与数据库之间的链连接-->
  <connectionStrings>
    <!--name=连接字符串名称;Data Source=服务器名;Initial Catalog=数据库名;User ID=用户;Password=密码";
      Integrated Security="True" 说明是集成验证，是Windows验证的方式，只要有这个属性及属性值，连接字符串中就不需要用户名及密码-->
    <add name="DefaultConnection" connectionString="Data Source=.;Initial Catalog=FoJiao;User Id=sa;Password=12345" providerName="System.Data.SqlClient" />
    <!--<add name="DefaultConnection" connectionString="Data Source=(LocalDb)\v11.0;AttachDbFilename=|DataDirectory|\aspnet-YinJi100-20150421120330.mdf;Initial Catalog=aspnet-YinJi100-20150421120330;Integrated Security=True"
      providerName="System.Data.SqlClient" />-->
  </connectionStrings>
  <!--appSettings是应用程序设置,可以定义应用程序的全局常量设置等信息-->
  <appSettings>
    <add key="webpages:Version" value="3.0.0.0" />
    <add key="webpages:Enabled" value="false" />
    <add key="ClientValidationEnabled" value="true" />
    <add key="UnobtrusiveJavaScriptEnabled" value="true" />
    <add key="vs:EnableBrowserLink" value="false" />
    <add key="vs:EnableBrowserLink" value="false" />
    <!--<add key="TargetUrl" value="http://fojiao.ruiyuedigi.com" />!-->	
    
    
  </appSettings>

  <!--============log4net配置信息=====================-->
  <log4net debug="true">
    <!--定义输出到文件中-->
    <appender name="RollingLogFileAppender" type="log4net.Appender.RollingFileAppender">
      <!--定义文件存放位置及文件名开头-->
      <file value="App_Data\YaoYYLog-" />
      <!--是否追加到文件-->
      <appendToFile value="true" />
      <!--日期的格式-->
      <rollingStyle value="Date" />
      <StaticLogFileName value="false" />
      <!--文件名后面加上.txt后缀，必须使用转义字符-->
      <datePattern value="yyyyMM\\yyyyMMdd&quot;.txt&quot;" />
      <layout type="log4net.Layout.PatternLayout">
        <!--输出内容-->
        <conversionPattern value="%newline记录时间：%date 线程ID:[%thread] 日志级别：%-5level %newline错误描述：%message %newline " />
        <!--每条日志开头的文字说明-->
        <header value="==============================网站运行过程中产生的错误=============================&#xD;&#xA;&#xD;&#xA;" />        
        <!--每条日志末尾的文字说明-->
        <footer value="========================================END========================================&#xD;&#xA;&#xD;&#xA;" />
      </layout>
    </appender>
    <root>
      <!--文件形式记录日志-->
      <appender-ref ref="RollingLogFileAppender" />      
    </root>
  </log4net>
  <!--============END=====================-->
  
  <!--控制asp.net运行时的行为-->
  <system.web>
    <!--用于定义一些自定义错误信息的信息。
    此节点有Mode和defaultRedirect两个属性，其中defaultRedirect属性是一个可选属性，表示应用程序发生错误时重定向到的默认URL，如果没有指定该属性则显示一般性错误。
    Mode属性是一个必选属性，它有三个可能值，它们所代表的意义分别如下：
      On 表示在本地和远程用户都会看到自定义错误信息。
      Off 禁用自定义错误信息，本地和远程用户都会看到详细的错误信息。
      RemoteOnly 表示本地用户将看到详细错误信息，而远程用户将会看到自定义错误信息。-->
    <customErrors mode="Off">
      
    <!--根据服务器的HTTP错误状态代码而重定向到我们自定义的错误页面，注意要使<error>子节点下的配置生效，必须将<customErrors>节点节点的Mode属性设置为“On”-->
    <!--
      <error statusCode="404" redirect="404.html" />-->
    </customErrors>
    <!--配置asp.net http运行库的设置。可以在计算机，站点，应用程序和子目录级别声明
    允许最多的请求个数100，最长允许执行请求时间为120秒，控制用户上传文件的大小,默认是4M。useFullyQualifiedRedirectUrl客户端重定向不需要被自动转换为完全限定格式。-->
    <httpRuntime appRequestQueueLimit="100" executionTimeout="120" maxRequestLength="1024000" useFullyQualifiedRedirectUrl="false" minFreeThreads="8" minLocalRequestFreeThreads="4" />
    <!--通过 <authentication> 节可以配置 ASP.NET 使用的 安全身份验证模式，以标识传入的用户。Windows: 使用IIS验证方式,Forms: 使用基于窗体的验证方式,Passport: 采用Passport cookie验证模式,None: 不采用任何验证方式-->
    <authentication mode="None" />
    <!-- 设置 compilation debug="true" 将调试符号插入已编译的页面中。但由于这会影响性能，因此只在开发过程中将此值设置为 true。设置默认的开发语言C#。batch是否支持批处理-->
    <compilation debug="true" targetFramework="4.5" />
    <!--会话状态设置。mode: 分为off,Inproc,StateServer,SqlServer几种状态 
      mode = InProc 存储在进程中特点：具有最佳的性能，速度最快,但不能跨多台服务器存储共享.
      mode = "StateServer" 存储在状态服务器中特点:当需要跨服务器维护用户会话信息时，使用此方法。但是信息存储在状态服务器上，一旦状态服务器出现故障，信息将丢失. 
      mode="SqlServer" 存储在sql server中特点:工作负载会变大，但信息不会丢失
      stateConnectionString :指定asp.net应用程序存储远程会话状态的服务器名，默认为本机。
      sqlConnectionString:当用会话状态数据库时，在这里设置连接字符串。
      Cookieless:设置为flase时，表示使用cookie会话状态来标识客户.
    timeout表示会话超时时间。-->
    <sessionState mode="InProc" stateConnectionString="tcpip=127.0.0.1:42424" cookieless="false" timeout="120" />
  </system.web>

  <!--该节替换在 httpHandlers 和 httpModules 节中添加的与 AJAX 相关的 HTTP 处理程序和模块。该节使 IIS 7.0 在集成模式下运行时可使用这些处理程序和模块。在iis7.0 下运行 ASP.NET AJAX 需要 system.webServer
 节。对早期版本的 IIS 来说则不需要此节。 -->
  <system.webServer>
    <modules>
      <remove name="FormsAuthenticationModule" />
    </modules>
    <security>
      <requestFiltering>
       <!--1000MB-->
        <requestLimits maxAllowedContentLength="1048576000" />
      </requestFiltering>
    </security>
    <handlers>
      <remove name="ExtensionlessUrlHandler-Integrated-4.0" />
      <remove name="OPTIONSVerbHandler" />
      <remove name="TRACEVerbHandler" />
      <add name="ExtensionlessUrlHandler-Integrated-4.0" path="*." verb="*" type="System.Web.Handlers.TransferRequestHandler" preCondition="integratedMode,runtimeVersionv4.0" />
    </handlers>
  </system.webServer>
  
  <!--包含程序集绑定和垃圾回收的相关信息。!-->
  <runtime>
    <!--包含有关程序集版本重定向和程序集位置的信息   
      xmlns=指定程序集绑定所需的 XML 命名空间,使用字符串“urn:schemas-microsoft-com:asm.v1”作为值。-->
    <assemblyBinding xmlns="urn:schemas-microsoft-com:asm.v1">
      <!--封装程序集的绑定策略和程序集位置。 为每个程序集使用一个 <dependentAssembly> 标记。-->
      <dependentAssembly>
        <!--包含关于该程序集的标识信息。 此元素必须包含在每个 dependentAssembly 元素中。
          name=程序集的名称;ublicKeyToken=指定程序集强名称的十六进制值。-->
        <assemblyIdentity name="System.Web.Helpers" publicKeyToken="31bf3856ad364e35" />
        <!--将一个程序集版本重定向到另一个版本。
         oldVersion= 指定最初请求的程序集的版本;newVersion=指定要用来取代最初请求的版本的程序集版本（格式为：n.n.n.n）。-->
        <bindingRedirect oldVersion="1.0.0.0-3.0.0.0" newVersion="3.0.0.0" />
      </dependentAssembly>
      <dependentAssembly>
        <assemblyIdentity name="System.Web.Mvc" publicKeyToken="31bf3856ad364e35" />
        <bindingRedirect oldVersion="1.0.0.0-5.0.0.0" newVersion="5.0.0.0" />
      </dependentAssembly>
      <dependentAssembly>
        <assemblyIdentity name="System.Web.WebPages" publicKeyToken="31bf3856ad364e35" />
        <bindingRedirect oldVersion="1.0.0.0-3.0.0.0" newVersion="3.0.0.0" />
      </dependentAssembly>
      <dependentAssembly>
        <assemblyIdentity name="WebGrease" publicKeyToken="31bf3856ad364e35" />
        <bindingRedirect oldVersion="0.0.0.0-1.5.2.14234" newVersion="1.5.2.14234" />
      </dependentAssembly>
    </assemblyBinding>
  </runtime>
  
  <entityFramework>
    <defaultConnectionFactory type="System.Data.Entity.Infrastructure.SqlConnectionFactory, EntityFramework" />
    <providers>
      <provider invariantName="System.Data.SqlClient" type="System.Data.Entity.SqlServer.SqlProviderServices, EntityFramework.SqlServer" />
    </providers>
  </entityFramework>
  
</configuration>
